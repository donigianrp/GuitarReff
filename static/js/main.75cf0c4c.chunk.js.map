{"version":3,"sources":["store/logger.ts","store/static.ts","store/helpers.ts","store/fretboard.ts","store/index.ts","components/Fretboard/Fret/BoardSegment/BoardSegment.tsx","components/Fretboard/Fret/FretBar/FretBar.tsx","components/Fretboard/Fret/Strings/Strings.tsx","components/Fretboard/Fret/Fret.tsx","components/Fretboard/Fretboard.tsx","components/Main/Main.tsx","components/Selector/Selector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["logger","store","next","action","initialNotes","note","isSelected","highlight","scales","modeMap","Ionian","Dorian","Phrygian","Lydian","Mixolydian","Aeolian","Locrian","standardTuning","jimmyPageTuning","boardDisplay","tuning","size","mapped","map","noteDetails","ordered","orderNotesArr","slice","updateBoardDisplay","currentDisplay","selectedNotes","string","fret","includes","startNote","startIdx","findIndex","scaleNotes","scale","orderedNotes","name","position","modeBoardDisplay","mode","modeOrderedNotes","modeNotes","repeated","root","reduce","boardAcc","stringIdx","stringAcc","fretIdx","r","idx","check","isWithinRange","initialState","fretboard","open","frets","selectedScale","selectedMode","fretboardReducer","handleActions","UPDATE_TUNING","state","payload","SELECT_NOTE","updatedNotes","filter","updatedDisplay","SELECT_SCALE","detail","SELECT_MODE","console","log","useTypedDispatch","useDispatch","rootReducer","combineReducers","Root","styled","div","MarkerWrapper","MultipleMarkerWrapper","Marker","BoardSegment","props","boardMarkers","renderBoardMarkers","boardMarkersContainer","i","push","key","Fret","String","NoteLabel","Strings","fretPosition","notes","useSelector","Wrapper","FretLabel","FretComponentsWrapper","markerAmount","noteDisplay","FretBar","Fretboard","fretContainer","renderFrets","Main","NoteWrapper","NoteStyle","HighlightedNoteStyle","SectionWrapper","ScaleSelectStyle","select","NoteSelectStyle","Button","button","Selector","dispatch","useState","selectedScaleNote","setSelectedScaleNote","setSelectedScale","selectedModeNote","setSelectedModeNote","setSelectedMode","onChange","e","target","value","label","Object","keys","modeName","disabled","onClick","type","scaleName","Title","App","Boolean","window","location","hostname","match","middleware","applyMiddleware","createStore","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75cf0c4c.chunk.js","sourcesContent":["import { Middleware } from \"redux\";\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== \"production\") {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { BoardDisplayNote, ScaleName, ModeName } from \"../global\";\n\nexport const initialNotes: BoardDisplayNote[] = [\n  { note: \"A\", isSelected: false, highlight: [] },\n  { note: \"A#\", isSelected: false, highlight: [] },\n  { note: \"B\", isSelected: false, highlight: [] },\n  { note: \"C\", isSelected: false, highlight: [] },\n  { note: \"C#\", isSelected: false, highlight: [] },\n  { note: \"D\", isSelected: false, highlight: [] },\n  { note: \"D#\", isSelected: false, highlight: [] },\n  { note: \"E\", isSelected: false, highlight: [] },\n  { note: \"F\", isSelected: false, highlight: [] },\n  { note: \"F#\", isSelected: false, highlight: [] },\n  { note: \"G\", isSelected: false, highlight: [] },\n  { note: \"G#\", isSelected: false, highlight: [] },\n];\n\ntype Scales = {\n  [key in ScaleName]: number[];\n};\n\nexport const scales: Scales = {\n  \"Natural Major\": [0, 2, 4, 5, 7, 9, 11],\n  \"Natural Minor\": [0, 2, 3, 5, 7, 8, 10],\n  \"Major Pentatonic\": [0, 2, 4, 7, 9],\n  \"Minor Pentatonic\": [0, 3, 5, 7, 10],\n  \"Major Blues\": [0, 2, 3, 4, 7, 9],\n  \"Minor Blues\": [0, 3, 5, 6, 7, 10],\n};\n\ntype Modes = {\n  [key in ModeName]: number;\n};\n\nexport const modeMap: Modes = {\n  Ionian: 0,\n  Dorian: 1,\n  Phrygian: 2,\n  Lydian: 3,\n  Mixolydian: 4,\n  Aeolian: 5,\n  Locrian: 6,\n};\n\n// ************************Tunings*************************\n\nexport const standardTuning: BoardDisplayNote[] = [\n  {\n    note: \"E\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"A\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"G\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"B\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"E\",\n    isSelected: false,\n    highlight: [],\n  },\n];\n\nexport const jimmyPageTuning: BoardDisplayNote[] = [\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"A\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"G\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"A\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n];\n","import {\n  BoardDisplayNote,\n  BoardDisplay,\n  Note,\n  Fretboard,\n  FretboardString,\n  Scale,\n  Mode,\n  BoardDisplayString,\n} from \"../global\";\nimport { initialNotes, modeMap } from \"./static\";\nimport { scales } from \"./static\";\n\nexport const boardDisplay = (\n  tuning: BoardDisplayNote[],\n  size: number = 22\n): BoardDisplay => {\n  const mapped: BoardDisplay = tuning.map((noteDetails) => {\n    const ordered = orderNotesArr(noteDetails.note);\n    return [...ordered, ...ordered?.slice(0, size - 11)];\n  });\n  return mapped;\n};\n\nexport const updateBoardDisplay = (\n  currentDisplay: BoardDisplay,\n  selectedNotes: Note[]\n): BoardDisplay => {\n  return currentDisplay.map((string) => {\n    return string.map((fret) => {\n      if (selectedNotes.includes(fret.note)) {\n        return {\n          ...fret,\n          isSelected: true,\n        };\n      } else {\n        return {\n          ...fret,\n          isSelected: false,\n        };\n      }\n    });\n  });\n};\n\nexport const fretboard = (\n  tuning: BoardDisplayNote[],\n  size: number = 22\n): Fretboard => {\n  const mapped: Fretboard = tuning.map((noteDetails) => {\n    const ordered = orderNotesArr(noteDetails.note);\n    const string: FretboardString = {\n      open: ordered[0].note,\n      frets: [\n        ...ordered.map((fret) => fret.note),\n        ...ordered?.slice(0, size - 11).map((fret) => fret.note),\n      ],\n    };\n    return string;\n  });\n  return mapped;\n};\n\nexport const orderNotesArr = (startNote: Note): BoardDisplayNote[] => {\n  const startIdx = initialNotes.findIndex(\n    (noteDetails) => noteDetails.note === startNote\n  );\n\n  return [...initialNotes.slice(startIdx), ...initialNotes.slice(0, startIdx)];\n};\n\nexport const scaleNotes = (scale: Scale): BoardDisplayNote[] => {\n  const orderedNotes = orderNotesArr(scale.note);\n  return scales[scale.name].map((position) => {\n    return orderedNotes[position];\n  });\n};\n\nexport const modeNotes = (mode: Mode): BoardDisplayNote[] => {\n  const orderedNotes = scaleNotes({\n    name: \"Natural Major\",\n    note: mode.note,\n  });\n  let modeOrdered: BoardDisplayNote[] = [];\n  if (modeMap[mode.name] === 0) {\n    modeOrdered = orderedNotes;\n  } else {\n    modeOrdered = [\n      ...orderedNotes.slice(modeMap[mode.name]),\n      ...orderedNotes.slice(0, modeMap[mode.name]),\n    ];\n  }\n  return modeOrdered;\n};\n\nexport const modeBoardDisplay = (\n  currentDisplay: BoardDisplay,\n  mode: Mode\n): BoardDisplay => {\n  const modeOrderedNotes = modeNotes(mode);\n  let repeated = [\n    ...modeOrderedNotes,\n    ...modeOrderedNotes,\n    ...modeOrderedNotes,\n  ];\n\n  let root: number | null = null;\n\n  const isWithinRange = (r: number | null, idx: number) => {\n    let check = false;\n    if (r) {\n      if (idx >= r - 1 && idx <= r + 3) {\n        check = true;\n      }\n    }\n    return check;\n  };\n\n  return currentDisplay.reduce(\n    (boardAcc: BoardDisplay, string: BoardDisplayString, stringIdx: number) => {\n      return [\n        ...boardAcc,\n        string.reduce(\n          (\n            stringAcc: BoardDisplayString,\n            fret: BoardDisplayNote,\n            fretIdx: number\n          ) => {\n            let isSelected = false;\n            // if it's first string, the root hasn't been set and the first note in orderNotes equals the current note, set root\n            if (stringIdx === 0 && !root && repeated[0].note === fret.note) {\n              root = fretIdx;\n            }\n            if (\n              root &&\n              isWithinRange(root, fretIdx) &&\n              repeated[0].note === fret.note\n            ) {\n              repeated = [...repeated.slice(1)];\n              isSelected = true;\n            }\n            return [\n              ...stringAcc,\n              {\n                ...fret,\n                isSelected,\n              },\n            ];\n          },\n          []\n        ),\n      ];\n    },\n    []\n  );\n};\n","import {\n  Action,\n  ActionFunction1,\n  createAction,\n  handleActions,\n} from \"redux-actions\";\nimport {\n  BoardDisplay,\n  BoardDisplayNote,\n  Fretboard,\n  Note,\n  Scale,\n  Mode,\n} from \"../global\";\nimport {\n  boardDisplay,\n  fretboard,\n  updateBoardDisplay,\n  scaleNotes,\n  modeNotes,\n  modeBoardDisplay,\n} from \"./helpers\";\nimport { standardTuning } from \"./static\";\n\n// Model\nexport interface FretboardModel {\n  boardDisplay: BoardDisplay;\n  tuning: BoardDisplayNote[];\n  fretboard: Fretboard;\n  selectedNotes: Note[];\n  selectedScale: Scale | null;\n  selectedMode: Mode | null;\n}\n\n// Initial State\nconst initialState: FretboardModel = {\n  boardDisplay: boardDisplay(standardTuning),\n  tuning: standardTuning,\n  fretboard: fretboard(standardTuning),\n  selectedNotes: [],\n  selectedScale: null,\n  selectedMode: null,\n};\n\n// // Actions\n// export interface FretboardActions {\n//   updateTuning: ActionFunction1<BoardDisplayNote[], Action<BoardDisplayNote[]>>;\n//   selectNote: ActionFunction1<Note, Action<Note>>;\n// }\n\n// export const fretboardActions: FretboardActions = {\n//   updateTuning: createAction<BoardDisplayNote[]>(\"UPDATE_TUNING\"),\n//   selectNote: createAction<Note>(\"SELECT_NOTE\"),\n// };\n\n// Reducer\ninterface Payload<T> {\n  payload: T;\n}\n\nexport type FretboardDispatchParam =\n  | {\n      type: \"UPDATE_TUNING\";\n      payload: BoardDisplayNote[];\n    }\n  | {\n      type: \"SELECT_NOTE\";\n      payload: Note;\n    }\n  | {\n      type: \"SELECT_SCALE\";\n      payload: Scale;\n    }\n  | {\n      type: \"SELECT_MODE\";\n      payload: Mode;\n    };\n\nexport const fretboardReducer = handleActions<FretboardModel, any>(\n  {\n    UPDATE_TUNING: (state, action: Payload<BoardDisplayNote[]>) => {\n      if (action.payload) {\n        return {\n          ...state,\n          tuning: action.payload,\n          boardDisplay: boardDisplay(action.payload),\n        };\n      }\n      return state;\n    },\n    SELECT_NOTE: (state, action: Payload<Note>) => {\n      if (action.payload && state.selectedNotes.includes(action.payload)) {\n        let updatedNotes: Note[] = state.selectedNotes.filter(\n          (note) => note !== action.payload\n        );\n\n        const updatedDisplay = updateBoardDisplay(\n          state.boardDisplay,\n          updatedNotes\n        );\n        return {\n          ...state,\n          selectedNotes: updatedNotes,\n          boardDisplay: updatedDisplay,\n        };\n      } else if (action.payload) {\n        const updatedDisplay = updateBoardDisplay(state.boardDisplay, [\n          ...state.selectedNotes,\n          action.payload,\n        ]);\n        // ADD IN FUNCTIONALITY TO REMOVE NOTE ON 2ND CLICK\n        return {\n          ...state,\n          selectedNotes: [...state.selectedNotes, action.payload],\n          boardDisplay: updatedDisplay,\n        };\n      }\n      return state;\n    },\n    SELECT_SCALE: (state, action: Payload<Scale>) => {\n      const updatedNotes: Note[] = scaleNotes(action.payload).map(\n        (detail) => detail.note\n      );\n      const updatedDisplay = updateBoardDisplay(\n        state.boardDisplay,\n        updatedNotes\n      );\n      if (action.payload) {\n        return {\n          ...state,\n          selectedNotes: updatedNotes,\n          selectedScale: action.payload,\n          boardDisplay: updatedDisplay,\n        };\n      } else {\n        return state;\n      }\n    },\n    SELECT_MODE: (state, action: Payload<Mode>) => {\n      console.log(modeBoardDisplay(state.boardDisplay, action.payload));\n\n      if (action.payload) {\n        return {\n          ...state,\n          selectedMode: action.payload,\n          boardDisplay: modeBoardDisplay(state.boardDisplay, action.payload),\n        };\n      } else {\n        return state;\n      }\n    },\n  },\n  initialState\n);\n","import { Store, createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { logger } from \"./logger\";\nimport { combineReducers } from \"redux\";\nimport { RootState } from \"./state\";\nimport { fretboardReducer, FretboardDispatchParam } from \"../store/fretboard\";\nimport { useDispatch } from \"react-redux\";\n\ntype DispatchParams = FretboardDispatchParam;\ntype Dispatch = <TReturnType>(action: DispatchParams) => TReturnType;\nexport const useTypedDispatch = () => useDispatch<Dispatch>();\n\nexport const rootReducer = combineReducers<RootState>({\n  fretboard: fretboardReducer,\n});\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(logger);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(\n    rootReducer as any,\n    initialState as any,\n    middleware\n  ) as Store<RootState>;\n\n  // if (module.hot) {\n  //   module.hot.accept('app/reducers', () => {\n  //     const nextReducer = require('app/reducers');\n  //     store.replaceReducer(nextReducer);\n  //   });\n  // }\n\n  return store;\n}\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\n// Classic Style\n// const Root = styled.div`\n//   background: linear-gradient(\n//     90deg,\n//     rgba(102, 102, 102, 1) 0%,\n//     rgba(51, 51, 51, 1) 13%,\n//     rgba(51, 51, 51, 1) 87%,\n//     rgba(102, 102, 102, 1) 100%\n//   );\n//   width: 300px;\n//   height: 32px;\n// `;\n\n// Minimalist Style\nconst Root = styled.div`\n  width: 300px;\n  height: 32px;\n`;\n\nconst MarkerWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 100%;\n`;\nconst MultipleMarkerWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 100%;\n  margin: 0 48px 0 48px;\n`;\nconst Marker = styled.div`\n  width: 10px;\n  height: 10px;\n  background-color: #daa520;\n  border-radius: 30px;\n`;\n\ninterface Props {\n  boardMarkers: number;\n}\n\nconst BoardSegment: FunctionComponent<Props> = (props: Props) => {\n  const { boardMarkers } = props;\n  const renderBoardMarkers = () => {\n    let boardMarkersContainer: React.ReactElement[] = [];\n    for (let i = 0; i < boardMarkers; i++) {\n      boardMarkersContainer.push(<Marker key={i}></Marker>);\n    }\n    return boardMarkersContainer;\n  };\n\n  return (\n    <Root>\n      {boardMarkers === 2 ? (\n        <MultipleMarkerWrapper>{renderBoardMarkers()}</MultipleMarkerWrapper>\n      ) : (\n        <MarkerWrapper>{renderBoardMarkers()}</MarkerWrapper>\n      )}\n    </Root>\n  );\n};\n\nexport default BoardSegment;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  width: 100%;\n  height: 1px;\n  background: linear-gradient(\n    90deg,\n    rgba(223, 205, 159, 1) 0%,\n    rgba(218, 165, 32, 1) 13%,\n    rgba(218, 165, 32, 1) 87%,\n    rgba(223, 205, 159, 1) 100%\n  );\n`;\n\nconst Fret: FunctionComponent = props => {\n  return <Root></Root>;\n};\n\nexport default Fret;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport { BoardDisplayNote } from \"../../../../global\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../../store/state\";\nimport { FretboardModel } from \"../../../../store/fretboard\";\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: space-around;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 32px;\n`;\n\nconst String = styled.div`\n  height: 32px;\n  width: 2px;\n  background-color: #ccc;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NoteLabel = styled.div`\n  background-color: #c70039;\n  min-height: 25px;\n  min-width: 25px;\n  color: #fff;\n  border-radius: 25px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\ninterface Props {\n  fretboard: BoardDisplayNote[][];\n  fretPosition: number;\n}\n\nconst Strings: FunctionComponent<Props> = (props: Props) => {\n  const { fretboard, fretPosition } = props;\n\n  const { boardDisplay } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  const notes = boardDisplay.map((string) => {\n    return string[fretPosition];\n  });\n\n  return (\n    <Root>\n      {notes.map((noteDetails: BoardDisplayNote, i: number) => {\n        return (\n          <String key={i}>\n            {noteDetails.isSelected && (\n              <NoteLabel>{noteDetails.note}</NoteLabel>\n            )}\n          </String>\n        );\n      })}\n    </Root>\n  );\n};\n\nexport default Strings;\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { StateProps } from \"../../../global\";\nimport { useTypedDispatch } from \"../../../store\";\nimport { FretboardModel } from \"../../../store/fretboard\";\nimport { RootState } from \"../../../store/state\";\nimport BoardSegment from \"./BoardSegment/BoardSegment\";\nimport FretBar from \"./FretBar/FretBar\";\nimport Strings from \"./Strings/Strings\";\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst FretLabel = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 30px;\n  margin-right: 30px;\n`;\n\nconst FretComponentsWrapper = styled.div`\n  position: relative;\n  border-left: 2px solid #eee;\n`;\n\ninterface Props {\n  fretPosition: number;\n  markerAmount: number;\n}\n\nconst Fret: FunctionComponent<Props> = (props: Props) => {\n  const { fretPosition, markerAmount } = props;\n  const { noteDisplay } = useSelector<StateProps>(\n    (state) => state\n  ) as StateProps;\n\n  const { boardDisplay } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  const dispatch = useTypedDispatch();\n  return (\n    <Wrapper>\n      <FretLabel>{fretPosition}</FretLabel>\n      <FretComponentsWrapper>\n        <Strings fretboard={boardDisplay} fretPosition={fretPosition} />\n        <BoardSegment boardMarkers={markerAmount} />\n        <FretBar />\n      </FretComponentsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default Fret;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport Fret from \"./Fret/Fret\";\n\nconst Root = styled.div`\n  // height: 600px;\n  width: 360px;\n  border: 2px solid #eee;\n  border-left: none;\n`;\n\nconst Fretboard: FunctionComponent = (props) => {\n  const renderFrets = () => {\n    let fretContainer: React.ReactElement[] = [];\n    for (let i = 0; i <= 22; i++) {\n      if ([3, 5, 7, 9, 15, 17, 19, 21].includes(i)) {\n        fretContainer.push(<Fret key={i} fretPosition={i} markerAmount={1} />);\n      } else if (i === 12) {\n        fretContainer.push(<Fret key={i} fretPosition={i} markerAmount={2} />);\n      } else {\n        fretContainer.push(<Fret key={i} fretPosition={i} markerAmount={0} />);\n      }\n    }\n    return fretContainer;\n  };\n  return (\n    <div>\n      <Root>{renderFrets()}</Root>\n    </div>\n  );\n};\n\nexport default Fretboard;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport Fretboard from \"../Fretboard/Fretboard\";\n\nconst Root = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Main: FunctionComponent = (props) => {\n  return (\n    <Root>\n      <Fretboard />\n    </Root>\n  );\n};\n\nexport default Main;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport {\n  BoardDisplayNote,\n  Note,\n  Scale,\n  ScaleName,\n  ModeName,\n} from \"../../global\";\nimport { useTypedDispatch } from \"../../store\";\nimport { FretboardModel } from \"../../store/fretboard\";\nimport { RootState } from \"../../store/state\";\nimport { initialNotes, scales, modeMap } from \"../../store/static\";\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 1.5em;\n`;\nconst NoteWrapper = styled.div`\n  width: 100%;\n  margin: 20px 0;\n  display: flex;\n  justify-content: center;\n`;\nconst NoteStyle = styled.div`\n  width: 60px;\n  background-color: #aaa;\n  color: #fff;\n  border-radius: 5px;\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n`;\nconst HighlightedNoteStyle = styled.div`\n  width: 60px;\n  border-radius: 5px;\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n`;\n\nconst SectionWrapper = styled.div`\n  margin: 20px;\n`;\n\nconst ScaleNameStyle = styled.div`\n  margin: 10px 20px;\n  padding: 5px;\n  width: 200px;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\nconst ScaleSelectStyle = styled.select`\n  height: 30px;\n  width: 150px;\n  margin: 5px 10px;\n`;\nconst NoteSelectStyle = styled.select`\n  height: 30px;\n  width: 100px;\n  margin: 5px 10px;\n`;\nconst Button = styled.button`\n  cursor: pointer;\n  margin: 5px 10px;\n`;\n\nconst Selector: FunctionComponent = (props) => {\n  const dispatch = useTypedDispatch();\n  const [selectedScaleNote, setSelectedScaleNote] = useState<Note | \"\">(\"\");\n  const [selectedScale, setSelectedScale] = useState<ScaleName | \"\">(\"\");\n  const [selectedModeNote, setSelectedModeNote] = useState<Note | \"\">(\"\");\n  const [selectedMode, setSelectedMode] = useState<ModeName | \"\">(\"\");\n  const { selectedNotes } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  return (\n    <Root>\n      <div>\n        <SectionWrapper>\n          <div>Select Mode:</div>\n          <Wrapper>\n            <ScaleSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedMode(e.target.value as ModeName);\n                }\n              }}\n            >\n              <option value=\"\" label={\"Select mode:\"} />\n              {Object.keys(modeMap).map((modeName) => {\n                return (\n                  <option key={modeName} value={modeName}>\n                    {modeName}\n                  </option>\n                );\n              })}\n            </ScaleSelectStyle>\n            <NoteSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedModeNote(e.target.value as Note);\n                }\n              }}\n            >\n              <option value={\"\"} label={\"Select root:\"}></option>\n\n              {initialNotes.map((noteDetails) => {\n                return (\n                  <option key={noteDetails.note} value={noteDetails.note}>\n                    {noteDetails.note}\n                  </option>\n                );\n              })}\n            </NoteSelectStyle>\n            <Button\n              disabled={!selectedMode || !selectedModeNote}\n              onClick={() => {\n                if (selectedMode && selectedModeNote) {\n                  const mode = {\n                    name: selectedMode,\n                    note: selectedModeNote,\n                  };\n                  dispatch({\n                    type: \"SELECT_MODE\",\n                    payload: mode,\n                  });\n                }\n              }}\n            >\n              Filter\n            </Button>\n          </Wrapper>\n        </SectionWrapper>\n        <SectionWrapper>\n          <div>Select Scale:</div>\n          <Wrapper>\n            <ScaleSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedScale(e.target.value as ScaleName);\n                }\n              }}\n            >\n              <option value=\"\" label={\"Select scale:\"} />\n              {Object.keys(scales).map((scaleName) => {\n                return (\n                  <option key={scaleName} value={scaleName}>\n                    {scaleName}\n                  </option>\n                );\n              })}\n            </ScaleSelectStyle>\n            <NoteSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedScaleNote(e.target.value as Note);\n                }\n              }}\n            >\n              <option value={\"\"} label={\"Select root:\"}></option>\n\n              {initialNotes.map((noteDetails) => {\n                return (\n                  <option key={noteDetails.note} value={noteDetails.note}>\n                    {noteDetails.note}\n                  </option>\n                );\n              })}\n            </NoteSelectStyle>\n            <Button\n              disabled={!selectedScale || !selectedScaleNote}\n              onClick={() => {\n                if (selectedScale && selectedScaleNote) {\n                  const scale = {\n                    name: selectedScale,\n                    note: selectedScaleNote,\n                  };\n                  dispatch({\n                    type: \"SELECT_SCALE\",\n                    payload: scale,\n                  });\n                }\n              }}\n            >\n              Filter\n            </Button>\n          </Wrapper>\n        </SectionWrapper>\n        <SectionWrapper>\n          <div>Select Note:</div>\n          <div>\n            {initialNotes.map((noteDetails: BoardDisplayNote, i: number) => {\n              return (\n                <NoteWrapper key={i}>\n                  {selectedNotes.includes(noteDetails.note) ? (\n                    <NoteStyle\n                      onClick={() => {\n                        dispatch({\n                          type: \"SELECT_NOTE\",\n                          payload: noteDetails.note,\n                        });\n                      }}\n                    >\n                      {noteDetails.note}\n                    </NoteStyle>\n                  ) : (\n                    <HighlightedNoteStyle\n                      onClick={() => {\n                        dispatch({\n                          type: \"SELECT_NOTE\",\n                          payload: noteDetails.note,\n                        });\n                      }}\n                    >\n                      {noteDetails.note}\n                    </HighlightedNoteStyle>\n                  )}\n                </NoteWrapper>\n              );\n            })}\n          </div>\n        </SectionWrapper>\n      </div>\n    </Root>\n  );\n};\n\nexport default Selector;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Main from \"./components/Main/Main\";\nimport Selector from \"./components/Selector/Selector\";\nimport { useTypedDispatch } from \"./store\";\nimport { FretboardModel } from \"./store/fretboard\";\nimport { RootState } from \"./store/state\";\nimport { jimmyPageTuning, standardTuning } from \"./store/static\";\n\nconst Root = styled.div`\n  font: normal 14px Open Sans;\n`;\nconst Title = styled.div`\n  display: flex;\n  font: normal 2em Varela Round;\n  padding: 20px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst App: React.FC = () => {\n  const dispatch = useTypedDispatch();\n\n  const { tuning } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  return (\n    <Root>\n      <Title>GuitarReff</Title>\n      <button\n        onClick={() =>\n          dispatch({\n            type: \"UPDATE_TUNING\",\n            payload: standardTuning,\n          })\n        }\n      >\n        Standard Tuning\n      </button>\n      <button\n        onClick={() =>\n          dispatch({\n            type: \"UPDATE_TUNING\",\n            payload: jimmyPageTuning,\n          })\n        }\n      >\n        Jimmy Page Tuning\n      </button>\n      <Wrapper>\n        {tuning.map((noteDetails, idx) => (\n          <div key={idx}>{noteDetails.note}</div>\n        ))}\n      </Wrapper>\n      <Wrapper>\n        <Selector />\n        <Main />\n      </Wrapper>\n    </Root>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore } from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}