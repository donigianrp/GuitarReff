{"version":3,"sources":["components/Fretboard/Fret/BoardSegment/BoardSegment.tsx","components/Fretboard/Fret/FretBar/FretBar.tsx","components/Fretboard/Fret/Strings/Strings.tsx","components/Fretboard/Fret/Fret.tsx","components/Fretboard/Fretboard.tsx","components/Main/Main.tsx","store/logger.ts","store/static.ts","store/helpers.ts","store/fretboard.ts","store/index.ts","components/Selector/Dial/Options/Options.tsx","components/Selector/Dial/Dial.tsx","components/Selector/Selector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Root","styled","div","MarkerWrapper","Marker","MarkerTop","MarkerBottom","BoardSegment","props","boardMarkers","Fret","String","NoteLabel","Strings","fretPosition","boardDisplay","useSelector","state","fretboard","notes","i","push","map","noteDetails","key","isSelected","note","Wrapper","FretLabel","FretComponentsWrapper","Bottom","markerAmount","FretBar","Fretboard","renderFrets","fretContainer","includes","Main","logger","store","next","action","initialNotes","highlight","scales","modeMap","Ionian","Dorian","Phrygian","Lydian","Mixolydian","Aeolian","Locrian","standardTuning","tuning","size","mapped","ordered","orderNotesArr","slice","updateBoardDisplay","currentDisplay","selectedNotes","string","fret","startNote","startIdx","findIndex","scaleNotes","scale","orderedNotes","name","position","modeBoardDisplay","mode","modeOrderedNotes","modeNotes","repeated","root","reduce","boardAcc","stringIdx","stringAcc","fretIdx","r","idx","check","isWithinRange","initialState","open","frets","selectedScale","selectedMode","fretboardReducer","handleActions","UPDATE_TUNING","payload","SELECT_NOTE","updatedNotes","filter","updatedDisplay","SELECT_SCALE","detail","SELECT_MODE","console","log","useTypedDispatch","useDispatch","rootReducer","combineReducers","Option","p","attrs","bottom","left","selected","modes","label","Scales","React","memo","angle","min","max","dispatch","useState","setSelectedScale","useEffect","type","opt","Modes","Options","children","increment","length","half","Outline","OutlineHighlight","Bevel","Center","MarkerContainer","MarkerGrab","Dial","setSelected","grabbed","setGrabbed","setAngle","dialRef","useRef","x","y","pivot","setPivot","origin","setOrigin","current","getBoundingClientRect","renderDial","ref","onMouseEnter","onMouseLeave","onMouseMove","e","sideC","pageX","pageY","sideA","takeCos","angleA","Math","acos","PI","onMouseDown","onMouseUp","SectionWrapper","NoteSelectStyle","select","Selector","button","setSelectedScaleNote","setSelectedModeNote","onChange","target","value","App","Boolean","window","location","hostname","match","middleware","applyMiddleware","createStore","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fa3fc41.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  width: 100%;\n`;\n\nconst MarkerWrapper = styled.div`\n  position: absolute;\n  top: 145px;\n  left: 22.5px;\n`;\n\nconst Marker = styled.div`\n  width: 10px;\n  height: 10px;\n  background-color: #daa520;\n  border-radius: 30px;\n`;\nconst MarkerTop = styled.div`\n  width: 10px;\n  height: 10px;\n  background-color: #daa520;\n  border-radius: 30px;\n  position: absolute;\n  top: 94px;\n  left: 22.5px;\n`;\nconst MarkerBottom = styled.div`\n  width: 10px;\n  height: 10px;\n  background-color: #daa520;\n  border-radius: 30px;\n  position: absolute;\n  top: 196px;\n  left: 22.5px;\n`;\n\ninterface Props {\n  boardMarkers: number;\n}\n\nconst BoardSegment: FunctionComponent<Props> = (props: Props) => {\n  const { boardMarkers } = props;\n\n  return (\n    <Root>\n      {boardMarkers === 2 && (\n        <div>\n          <MarkerTop />\n          <MarkerBottom />\n        </div>\n      )}\n      {boardMarkers === 1 && (\n        <MarkerWrapper>\n          <Marker />\n        </MarkerWrapper>\n      )}\n    </Root>\n  );\n};\n\nexport default BoardSegment;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  height: 300px;\n  width: 3px;\n  background: #ccc;\n`;\n\n// background: linear-gradient(\n//   90deg,\n//   rgba(223, 205, 159, 1) 0%,\n//   rgba(218, 165, 32, 1) 13%,\n//   rgba(218, 165, 32, 1) 87%,\n//   rgba(223, 205, 159, 1) 100%\n// );\nconst Fret: FunctionComponent = (props) => {\n  return <Root></Root>;\n};\n\nexport default Fret;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport { BoardDisplayNote } from \"../../../../global\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../../store/state\";\nimport { FretboardModel } from \"../../../../store/fretboard\";\n\nconst Root = styled.div`\n  width: 100%;\n  height: 300px;\n  border-bottom: 2px solid #ccc;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n// align-items: center;\n\nconst String = styled.div`\n  height: 2px;\n  width: 55px;\n  background-color: #ccc;\n  position: relative;\n`;\n\nconst NoteLabel = styled.div`\n  background-color: #ccc;\n  width: 25px;\n  height: 25px;\n  color: #333;\n  border-radius: 25px;\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  left: 15px;\n  top: -12.5px;\n  font-weight: 600;\n`;\ninterface Props {\n  fretboard: BoardDisplayNote[][];\n  fretPosition: number;\n}\n\nconst Strings: FunctionComponent<Props> = (props: Props) => {\n  const { fretPosition } = props;\n\n  const { boardDisplay } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  let notes = [];\n  for (let i = 5; i >= 0; i--) {\n    notes.push(boardDisplay[i][fretPosition]);\n  }\n\n  return (\n    <Root>\n      {notes.map((noteDetails: BoardDisplayNote, i: number) => {\n        return (\n          <String key={i}>\n            {noteDetails.isSelected && (\n              <NoteLabel>{noteDetails.note}</NoteLabel>\n            )}\n          </String>\n        );\n      })}\n    </Root>\n  );\n};\n\nexport default Strings;\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { FretboardModel } from \"../../../store/fretboard\";\nimport { RootState } from \"../../../store/state\";\nimport BoardSegment from \"./BoardSegment/BoardSegment\";\nimport FretBar from \"./FretBar/FretBar\";\nimport Strings from \"./Strings/Strings\";\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n// flex-direction: column;\n\nconst FretLabel = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\n\nconst FretComponentsWrapper = styled.div`\n  position: relative;\n  border-top: 2px solid #ccc;\n`;\n\nconst Bottom = styled.div`\n  height: 304px;\n  width: 3px;\n  background: #ccc;\n  margin-top: 37px;\n`;\n\ninterface Props {\n  fretPosition: number;\n  markerAmount: number;\n}\n\nconst Fret: FunctionComponent<Props> = (props: Props) => {\n  const { fretPosition, markerAmount } = props;\n  const { boardDisplay } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  return (\n    <Wrapper>\n      <div>\n        <FretLabel>{fretPosition}</FretLabel>\n        <FretComponentsWrapper>\n          <Strings fretboard={boardDisplay} fretPosition={fretPosition} />\n          <BoardSegment boardMarkers={markerAmount} />\n          <FretBar />\n        </FretComponentsWrapper>\n      </div>\n      {fretPosition === 22 && <Bottom />}\n    </Wrapper>\n  );\n};\n\nexport default Fret;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport Fret from \"./Fret/Fret\";\n\nconst Root = styled.div`\n  width: 100%;\n  border-left: none;\n  display: flex;\n`;\n\nconst Fretboard: FunctionComponent = (props) => {\n  const renderFrets = (() => {\n    let fretContainer: React.ReactElement[] = [];\n    for (let i = 0; i <= 22; i++) {\n      if ([3, 5, 7, 9, 15, 17, 19, 21].includes(i)) {\n        fretContainer.push(<Fret key={i} fretPosition={i} markerAmount={1} />);\n      } else if (i === 12) {\n        fretContainer.push(<Fret key={i} fretPosition={i} markerAmount={2} />);\n      } else {\n        fretContainer.push(<Fret key={i} fretPosition={i} markerAmount={0} />);\n      }\n    }\n    return fretContainer;\n  })();\n  return (\n    <div>\n      <Root>{renderFrets}</Root>\n    </div>\n  );\n};\n\nexport default Fretboard;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport Fretboard from \"../Fretboard/Fretboard\";\n\nconst Root = styled.div`\n  min-width: 1200px\n  display: flex;\n  justify-content: center;\n`;\n\nconst Main: FunctionComponent = (props) => {\n  return (\n    <Root>\n      <Fretboard />\n    </Root>\n  );\n};\n\nexport default Main;\n","import { Middleware } from \"redux\";\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== \"production\") {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { BoardDisplayNote, ScaleName, ModeName } from \"../global\";\n\nexport const initialNotes: BoardDisplayNote[] = [\n  { note: \"A\", isSelected: false, highlight: [] },\n  { note: \"A#\", isSelected: false, highlight: [] },\n  { note: \"B\", isSelected: false, highlight: [] },\n  { note: \"C\", isSelected: false, highlight: [] },\n  { note: \"C#\", isSelected: false, highlight: [] },\n  { note: \"D\", isSelected: false, highlight: [] },\n  { note: \"D#\", isSelected: false, highlight: [] },\n  { note: \"E\", isSelected: false, highlight: [] },\n  { note: \"F\", isSelected: false, highlight: [] },\n  { note: \"F#\", isSelected: false, highlight: [] },\n  { note: \"G\", isSelected: false, highlight: [] },\n  { note: \"G#\", isSelected: false, highlight: [] },\n];\n\ntype Scales = {\n  [key in ScaleName]: number[];\n};\n\nexport const scales: Scales = {\n  \"Natural Major\": [0, 2, 4, 5, 7, 9, 11],\n  \"Natural Minor\": [0, 2, 3, 5, 7, 8, 10],\n  \"Major Pentatonic\": [0, 2, 4, 7, 9],\n  \"Minor Pentatonic\": [0, 3, 5, 7, 10],\n  \"Major Blues\": [0, 2, 3, 4, 7, 9],\n  \"Minor Blues\": [0, 3, 5, 6, 7, 10],\n};\n\ntype Modes = {\n  [key in ModeName]: number;\n};\n\nexport const modeMap: Modes = {\n  Ionian: 0,\n  Dorian: 1,\n  Phrygian: 2,\n  Lydian: 3,\n  Mixolydian: 4,\n  Aeolian: 5,\n  Locrian: 6,\n};\n\n// ************************Tunings*************************\n\nexport const standardTuning: BoardDisplayNote[] = [\n  {\n    note: \"E\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"A\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"G\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"B\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"E\",\n    isSelected: false,\n    highlight: [],\n  },\n];\n\nexport const jimmyPageTuning: BoardDisplayNote[] = [\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"A\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"G\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"A\",\n    isSelected: false,\n    highlight: [],\n  },\n  {\n    note: \"D\",\n    isSelected: false,\n    highlight: [],\n  },\n];\n","import {\n  BoardDisplayNote,\n  BoardDisplay,\n  Note,\n  Fretboard,\n  FretboardString,\n  Scale,\n  Mode,\n  BoardDisplayString,\n} from \"../global\";\nimport { initialNotes, modeMap } from \"./static\";\nimport { scales } from \"./static\";\n\nexport const boardDisplay = (\n  tuning: BoardDisplayNote[],\n  size: number = 22\n): BoardDisplay => {\n  const mapped: BoardDisplay = tuning.map((noteDetails) => {\n    const ordered = orderNotesArr(noteDetails.note);\n    return [...ordered, ...ordered?.slice(0, size - 11)];\n  });\n  return mapped;\n};\n\nexport const updateBoardDisplay = (\n  currentDisplay: BoardDisplay,\n  selectedNotes: Note[]\n): BoardDisplay => {\n  return currentDisplay.map((string) => {\n    return string.map((fret) => {\n      if (selectedNotes.includes(fret.note)) {\n        return {\n          ...fret,\n          isSelected: true,\n        };\n      } else {\n        return {\n          ...fret,\n          isSelected: false,\n        };\n      }\n    });\n  });\n};\n\nexport const fretboard = (\n  tuning: BoardDisplayNote[],\n  size: number = 22\n): Fretboard => {\n  const mapped: Fretboard = tuning.map((noteDetails) => {\n    const ordered = orderNotesArr(noteDetails.note);\n    const string: FretboardString = {\n      open: ordered[0].note,\n      frets: [\n        ...ordered.map((fret) => fret.note),\n        ...ordered?.slice(0, size - 11).map((fret) => fret.note),\n      ],\n    };\n    return string;\n  });\n  return mapped;\n};\n\nexport const orderNotesArr = (startNote: Note): BoardDisplayNote[] => {\n  const startIdx = initialNotes.findIndex(\n    (noteDetails) => noteDetails.note === startNote\n  );\n\n  return [...initialNotes.slice(startIdx), ...initialNotes.slice(0, startIdx)];\n};\n\nexport const scaleNotes = (scale: Scale): BoardDisplayNote[] => {\n  const orderedNotes = orderNotesArr(scale.note);\n  return scales[scale.name].map((position) => {\n    return orderedNotes[position];\n  });\n};\n\nexport const modeNotes = (mode: Mode): BoardDisplayNote[] => {\n  const orderedNotes = scaleNotes({\n    name: \"Natural Major\",\n    note: mode.note,\n  });\n  let modeOrdered: BoardDisplayNote[] = [];\n  if (modeMap[mode.name] === 0) {\n    modeOrdered = orderedNotes;\n  } else {\n    modeOrdered = [\n      ...orderedNotes.slice(modeMap[mode.name]),\n      ...orderedNotes.slice(0, modeMap[mode.name]),\n    ];\n  }\n  return modeOrdered;\n};\n\nexport const modeBoardDisplay = (\n  currentDisplay: BoardDisplay,\n  mode: Mode\n): BoardDisplay => {\n  const modeOrderedNotes = modeNotes(mode);\n  let repeated = [\n    ...modeOrderedNotes,\n    ...modeOrderedNotes,\n    ...modeOrderedNotes,\n  ];\n\n  let root: number | null = null;\n\n  const isWithinRange = (r: number | null, idx: number) => {\n    let check = false;\n    if (r) {\n      if (idx >= r - 1 && idx <= r + 3) {\n        check = true;\n      }\n    }\n    return check;\n  };\n\n  return currentDisplay.reduce(\n    (boardAcc: BoardDisplay, string: BoardDisplayString, stringIdx: number) => {\n      return [\n        ...boardAcc,\n        string.reduce(\n          (\n            stringAcc: BoardDisplayString,\n            fret: BoardDisplayNote,\n            fretIdx: number\n          ) => {\n            let isSelected = false;\n            // if it's first string, the root hasn't been set and the first note in orderNotes equals the current note, set root\n            if (stringIdx === 0 && !root && repeated[0].note === fret.note) {\n              root = fretIdx;\n            }\n            if (\n              root &&\n              isWithinRange(root, fretIdx) &&\n              repeated[0].note === fret.note\n            ) {\n              repeated = [...repeated.slice(1)];\n              isSelected = true;\n            }\n            return [\n              ...stringAcc,\n              {\n                ...fret,\n                isSelected,\n              },\n            ];\n          },\n          []\n        ),\n      ];\n    },\n    []\n  );\n};\n","import { handleActions } from \"redux-actions\";\nimport {\n  BoardDisplay,\n  BoardDisplayNote,\n  Fretboard,\n  Mode,\n  Note,\n  Scale,\n} from \"../global\";\nimport {\n  boardDisplay,\n  fretboard,\n  modeBoardDisplay,\n  scaleNotes,\n  updateBoardDisplay,\n} from \"./helpers\";\nimport { standardTuning } from \"./static\";\n\n// Model\nexport interface FretboardModel {\n  boardDisplay: BoardDisplay;\n  tuning: BoardDisplayNote[];\n  fretboard: Fretboard;\n  selectedNotes: Note[];\n  selectedScale: Scale | null;\n  selectedMode: Mode | null;\n}\n\n// Initial State\nconst initialState: FretboardModel = {\n  boardDisplay: boardDisplay(standardTuning),\n  tuning: standardTuning,\n  fretboard: fretboard(standardTuning),\n  selectedNotes: [],\n  selectedScale: null,\n  selectedMode: null,\n};\n\n// // Actions\n// export interface FretboardActions {\n//   updateTuning: ActionFunction1<BoardDisplayNote[], Action<BoardDisplayNote[]>>;\n//   selectNote: ActionFunction1<Note, Action<Note>>;\n// }\n\n// export const fretboardActions: FretboardActions = {\n//   updateTuning: createAction<BoardDisplayNote[]>(\"UPDATE_TUNING\"),\n//   selectNote: createAction<Note>(\"SELECT_NOTE\"),\n// };\n\n// Reducer\ninterface Payload<T> {\n  payload: T;\n}\n\nexport type FretboardDispatchParam =\n  | {\n      type: \"UPDATE_TUNING\";\n      payload: BoardDisplayNote[];\n    }\n  | {\n      type: \"SELECT_NOTE\";\n      payload: Note;\n    }\n  | {\n      type: \"SELECT_SCALE\";\n      payload: Scale;\n    }\n  | {\n      type: \"SELECT_MODE\";\n      payload: Mode;\n    };\n\nexport const fretboardReducer = handleActions<FretboardModel, any>(\n  {\n    UPDATE_TUNING: (state, action: Payload<BoardDisplayNote[]>) => {\n      if (action.payload) {\n        return {\n          ...state,\n          tuning: action.payload,\n          boardDisplay: boardDisplay(action.payload),\n        };\n      }\n      return state;\n    },\n    SELECT_NOTE: (state, action: Payload<Note>) => {\n      if (action.payload && state.selectedNotes.includes(action.payload)) {\n        let updatedNotes: Note[] = state.selectedNotes.filter(\n          (note) => note !== action.payload\n        );\n\n        const updatedDisplay = updateBoardDisplay(\n          state.boardDisplay,\n          updatedNotes\n        );\n        return {\n          ...state,\n          selectedNotes: updatedNotes,\n          boardDisplay: updatedDisplay,\n        };\n      } else if (action.payload) {\n        const updatedDisplay = updateBoardDisplay(state.boardDisplay, [\n          ...state.selectedNotes,\n          action.payload,\n        ]);\n        // ADD IN FUNCTIONALITY TO REMOVE NOTE ON 2ND CLICK\n        return {\n          ...state,\n          selectedNotes: [...state.selectedNotes, action.payload],\n          boardDisplay: updatedDisplay,\n        };\n      }\n      return state;\n    },\n    SELECT_SCALE: (state, action: Payload<Scale>) => {\n      const updatedNotes: Note[] = scaleNotes(action.payload).map(\n        (detail) => detail.note\n      );\n      const updatedDisplay = updateBoardDisplay(\n        state.boardDisplay,\n        updatedNotes\n      );\n      if (action.payload) {\n        return {\n          ...state,\n          selectedNotes: updatedNotes,\n          selectedScale: action.payload,\n          boardDisplay: updatedDisplay,\n        };\n      } else {\n        return state;\n      }\n    },\n    SELECT_MODE: (state, action: Payload<Mode>) => {\n      console.log(modeBoardDisplay(state.boardDisplay, action.payload));\n\n      if (action.payload) {\n        return {\n          ...state,\n          selectedMode: action.payload,\n          boardDisplay: modeBoardDisplay(state.boardDisplay, action.payload),\n        };\n      } else {\n        return state;\n      }\n    },\n  },\n  initialState\n);\n","import { Store, createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { logger } from \"./logger\";\nimport { combineReducers } from \"redux\";\nimport { RootState } from \"./state\";\nimport { fretboardReducer, FretboardDispatchParam } from \"../store/fretboard\";\nimport { useDispatch } from \"react-redux\";\n\ntype DispatchParams = FretboardDispatchParam;\ntype Dispatch = <TReturnType>(action: DispatchParams) => TReturnType;\nexport const useTypedDispatch = () => useDispatch<Dispatch>();\n\nexport const rootReducer = combineReducers<RootState>({\n  fretboard: fretboardReducer,\n});\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(logger);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(\n    rootReducer as any,\n    initialState as any,\n    middleware\n  ) as Store<RootState>;\n\n  // if (module.hot) {\n  //   module.hot.accept('app/reducers', () => {\n  //     const nextReducer = require('app/reducers');\n  //     store.replaceReducer(nextReducer);\n  //   });\n  // }\n\n  return store;\n}\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { DialOption, ScaleName, ModeName, Note } from \"../../../../global\";\nimport { useTypedDispatch } from \"../../../../store\";\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  width: 400px;\n  height: 240px;\n  position: relative;\n  padding-bottom: 40px;\n`;\n\nconst Option = styled.p.attrs(\n  (props: { bottom: number; left: number; selected: boolean }) => ({\n    bottom: props.bottom || 0,\n    left: props.left || 0,\n    selected: props.selected || false,\n  })\n)`\n  position: absolute;\n  bottom: ${(props) => props.bottom}px;\n  left: ${(props) => props.left}px;\n  color: ${(props) => (props.selected ? \"#3553ff\" : \"#fff\")};\n  font-weight: ${(props) => (props.selected ? \"600\" : \"400\")};\n  font-size: 0.8rem;\n  width: 70px;\n`;\n\nconst modes: DialOption<ModeName>[] = [\n  {\n    label: \"Ionian\",\n    bottom: 30,\n    left: 90,\n  },\n  {\n    label: \"Dorian\",\n    bottom: 120,\n    left: 50,\n  },\n  {\n    label: \"Phrygian\",\n    bottom: 205,\n    left: 75,\n  },\n  {\n    label: \"Lydian\",\n    bottom: 235,\n    left: 182,\n  },\n  {\n    label: \"Mixolydian\",\n    bottom: 205,\n    left: 275,\n  },\n  {\n    label: \"Aeolian\",\n    bottom: 120,\n    left: 310,\n  },\n  {\n    label: \"Locrian\",\n    bottom: 30,\n    left: 270,\n  },\n];\n\nconst scales: DialOption<ScaleName>[] = [\n  {\n    label: \"Natural Minor\",\n    bottom: 25,\n    left: 70,\n  },\n  {\n    label: \"Natural Major\",\n    bottom: 140,\n    left: 50,\n  },\n  {\n    label: \"Major Blues\",\n    bottom: 220,\n    left: 120,\n  },\n  {\n    label: \"Minor Blues\",\n    bottom: 220,\n    left: 250,\n  },\n  {\n    label: \"Major Pentatonic\",\n    bottom: 140,\n    left: 308,\n  },\n  {\n    label: \"Minor Pentatonic\",\n    bottom: 25,\n    left: 280,\n  },\n];\n\ninterface OptProps {\n  angle: number;\n  min: (idx: number) => number;\n  max: (idx: number) => number;\n}\n\nconst Scales: FunctionComponent<OptProps> = React.memo((props: OptProps) => {\n  const { angle, min, max } = props;\n  const dispatch = useTypedDispatch();\n  const [selectedScale, setSelectedScale] = useState<ScaleName | \"\">(\"\");\n  useEffect(() => {\n    if (selectedScale) {\n      const scale = {\n        name: selectedScale,\n        note: \"A\" as Note,\n      };\n      dispatch({\n        type: \"SELECT_SCALE\",\n        payload: scale,\n      });\n    }\n  }, [selectedScale]);\n  return (\n    <>\n      {scales.map((opt: DialOption<ScaleName>, idx: number) => {\n        if (\n          angle >= min(idx + 1) &&\n          angle <= max(idx + 1) &&\n          opt.label !== selectedScale\n        ) {\n          // console.log(opt.label);\n          setSelectedScale(opt.label);\n        }\n        // else if (angle >= min(0) || angle <= max(0)) {\n        //   setSelectedScale(\"\");\n        // }\n\n        return (\n          <>\n            <Option\n              bottom={opt.bottom}\n              left={opt.left}\n              selected={angle >= min(idx + 1) && angle <= max(idx + 1)}\n            >\n              {opt.label}\n            </Option>\n            <Option\n              bottom={0}\n              left={183}\n              selected={angle >= min(0) || angle <= max(0)}\n            >\n              None\n            </Option>\n          </>\n        );\n      })}\n    </>\n  );\n});\nconst Modes: FunctionComponent<OptProps> = React.memo((props: OptProps) => {\n  const { angle, min, max } = props;\n  return (\n    <>\n      {modes.map((opt: DialOption<ModeName>, idx: number) => {\n        return (\n          <>\n            <Option\n              bottom={opt.bottom}\n              left={opt.left}\n              selected={angle >= min(idx + 1) && angle <= max(idx + 1)}\n            >\n              {opt.label}\n            </Option>\n            <Option\n              bottom={0}\n              left={190}\n              selected={angle >= min(0) || angle <= max(0)}\n            >\n              All\n            </Option>\n          </>\n        );\n      })}\n    </>\n  );\n});\n\ninterface Props {\n  children?: any;\n  type: \"scales\" | \"modes\";\n  angle: number;\n}\nconst Options: FunctionComponent<Props> = (props: Props) => {\n  const { children, type, angle } = props;\n\n  const increment =\n    type === \"scales\" ? 360 / (scales.length + 1) : 360 / (modes.length + 1);\n  const half = increment / 2;\n  const min = (idx: number) => {\n    return idx === 0 ? 360 - half : idx * increment - half;\n  };\n  const max = (idx: number) => idx * increment + half;\n\n  return (\n    <Root>\n      {type === \"scales\" ? (\n        <Scales angle={angle} min={min} max={max} />\n      ) : (\n        <Modes angle={angle} min={min} max={max} />\n      )}\n      {children}\n    </Root>\n  );\n};\n\nexport default Options;\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Options from \"./Options/Options\";\n\nconst Root = styled.div`\n  display: flex;\n`;\n\nconst Outline = styled.div`\n  height: 200px;\n  width: 200px;\n  border-radius: 100px;\n  background-color: #97a6ff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst OutlineHighlight = styled.div`\n  height: 200px;\n  width: 200px;\n  border-radius: 100px;\n  background: #3553ff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 0px 10px #4863ff;\n`;\n\nconst Bevel = styled.div`\n  height: 186px;\n  width: 186px;\n  border-radius: 93px;\n  background: linear-gradient(315deg, #000, #888);\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Center = styled.div`\n  height: 176px;\n  width: 176px;\n  border-radius: 88px;\n  background: linear-gradient(315deg, #222 1%, #ccc 80%);\n  position: relative;\n`;\n\nconst MarkerContainer = styled.div.attrs((props: { angle: number }) => ({\n  angle: props.angle || 0,\n}))`\n  height: 176px;\n  width: 176px;\n  border-radius: 88px;\n  background: transparent;\n  position: relative;\n  transform: rotate(${(props) => props.angle}deg);\n`;\n\nconst MarkerGrab = styled.div`\n  position: absolute;\n  bottom: 0px;\n  left: 68px;\n  background: radial-gradient(#fff 2%, #444);\n  height: 40px;\n  width: 40px;\n  border-radius: 20px;\n  cursor: grab;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 15px;\n`;\n\nconst Marker = styled.div`\n  background-color: #fff;\n  height: 10px;\n  width: 10px;\n  border-radius: 5px;\n  background: transparent;\n`;\n\ninterface Props {\n  type: \"scales\" | \"modes\";\n}\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\nconst Dial: FunctionComponent<Props> = (props: Props) => {\n  const { type } = props;\n\n  const [selected, setSelected] = useState(false);\n  const [grabbed, setGrabbed] = useState(false);\n  const [angle, setAngle] = useState(0);\n  const dialRef = useRef<HTMLDivElement>(null);\n  const [pivot, setPivot] = useState<Coordinates>({\n    x: 0,\n    y: 0,\n  });\n  const [origin, setOrigin] = useState<Coordinates>({\n    x: 0,\n    y: 0,\n  });\n\n  useEffect(() => {\n    if (dialRef.current) {\n      const { x, y } = dialRef.current.getBoundingClientRect();\n\n      setPivot({\n        x: x + 88,\n        y: y + 88,\n      });\n      setOrigin({\n        x: x + 88,\n        y: y + 176,\n      });\n    }\n  }, []);\n\n  const renderDial = (() => {\n    return (\n      <Bevel>\n        <Center ref={dialRef}>\n          <MarkerContainer\n            angle={angle}\n            onMouseEnter={() => {\n              setSelected(true);\n            }}\n            onMouseLeave={() => {\n              setSelected(false);\n              setGrabbed(false);\n            }}\n            onMouseMove={(e) => {\n              if (!grabbed) {\n                return;\n              }\n\n              const sideC =\n                ((pivot.x - e.pageX) ** 2 + (pivot.y - e.pageY) ** 2) ** 0.5;\n\n              const sideB = 88;\n              const sideA =\n                ((origin.x - e.pageX) ** 2 + (origin.y - e.pageY) ** 2) ** 0.5;\n\n              const takeCos =\n                (sideB ** 2 + sideC ** 2 - sideA ** 2) / (2 * sideB * sideC);\n\n              const angleA = Math.acos(takeCos);\n              if (e.pageX > pivot.x) {\n                setAngle(360 - (angleA * 180) / Math.PI);\n              } else {\n                setAngle((angleA * 180) / Math.PI);\n              }\n            }}\n          >\n            <MarkerGrab\n              onMouseDown={(e) => {\n                setGrabbed(true);\n              }}\n              onMouseUp={(e) => {\n                setGrabbed(false);\n              }}\n            >\n              <Marker />\n            </MarkerGrab>\n          </MarkerContainer>\n        </Center>\n      </Bevel>\n    );\n  })();\n\n  return (\n    <Root>\n      <Options type={type} angle={angle}>\n        {selected ? (\n          <OutlineHighlight>{renderDial}</OutlineHighlight>\n        ) : (\n          <Outline>{renderDial}</Outline>\n        )}\n      </Options>\n    </Root>\n  );\n};\n\nexport default Dial;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport {\n  BoardDisplayNote,\n  Note,\n  Scale,\n  ScaleName,\n  ModeName,\n} from \"../../global\";\nimport { useTypedDispatch } from \"../../store\";\nimport { FretboardModel } from \"../../store/fretboard\";\nimport { RootState } from \"../../store/state\";\nimport { initialNotes, scales, modeMap } from \"../../store/static\";\nimport Dial from \"./Dial/Dial\";\n\nconst Root = styled.div`\n  // display: flex;\n  // justify-content: center;\n  font-size: 1.5em;\n  // padding: 100px;\n  width: 1200px;\n`;\nconst NoteWrapper = styled.div`\n  width: 100%;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n`;\nconst NoteContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nconst Indicator = styled.div`\n  height: 12px;\n  width: 12px;\n  border-radius: 12px;\n  background: radial-gradient(#f99f9f 99%, #ffafaf);\n`;\nconst HighlightedIndicator = styled.div`\n  height: 12px;\n  width: 12px;\n  border-radius: 12px;\n  background: radial-gradient(#ce0000 30%, #ffafaf);\n  box-shadow: 0 0 10px #ce0000;\n`;\nconst NotesWrapper = styled.div`\n  width: 100%;\n  height: 100px;\n\n  margin: 20px 0;\n  display: flex;\n  justify-content: center;\n`;\nconst NoteStyle = styled.div`\n  width: 56px;\n  height: 56px;\n  margin-top: 2px;\n  background: linear-gradient(315deg, #222 1%, #ccc);\n  border-radius: 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`;\nconst NoteStyleBorder = styled.div`\n  width: 60px;\n  height: 60px;\n  background: linear-gradient(135deg, #444 990%, #ccc);\n  border-radius: 5px;\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n  margin: 10px;\n  -webkit-box-shadow: 0px 5px 0px #aaa;\n  -moz-box-shadow: 0px 5px 0px #aaa;\n  -ms-box-shadow: 0px 5px 0px #aaa;\n  -o-box-shadow: 0px 5px 0px #aaa;\n  box-shadow: 0.5px 2px 0px #aaa;\n  transition: all 0.1s ease-in-out;\n\n  &:hover {\n    box-shadow: 0 0 0;\n    margin: 12px 10px 10px 10px;\n  }\n`;\n\nconst NoteGradient = styled.div`\n  color: #fff;\n  // background: linear-gradient(to bottom, #eee 50%, #333);\n  // -webkit-background-clip: text;\n  // -webkit-text-fill-color: transparent;\n`;\nconst HighlightedNoteStyle = styled.div`\n  width: 60px;\n  height: 60px;\n  background: linear-gradient(135deg, #444 990%, #ccc);\n  border-radius: 5px;\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n  margin: 12px 10px 10px 10px;\n  box-shadow: 0;\n`;\n\nconst SectionWrapper = styled.div`\n  margin: 20px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\nconst ScaleSelectStyle = styled.select`\n  height: 30px;\n  width: 150px;\n  margin: 5px 10px;\n`;\nconst NoteSelectStyle = styled.select`\n  height: 30px;\n  width: 100px;\n  margin: 5px 10px;\n`;\nconst Button = styled.button`\n  cursor: pointer;\n  margin: 5px 10px;\n`;\n\nconst Selector: FunctionComponent = (props) => {\n  const dispatch = useTypedDispatch();\n  const [selectedScaleNote, setSelectedScaleNote] = useState<Note | \"\">(\"\");\n  const [selectedScale, setSelectedScale] = useState<ScaleName | \"\">(\"\");\n  const [selectedModeNote, setSelectedModeNote] = useState<Note | \"\">(\"\");\n  const [selectedMode, setSelectedMode] = useState<ModeName | \"\">(\"\");\n  const { selectedNotes } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  return (\n    <Root>\n      <Wrapper>\n        <Dial type={\"scales\"} />\n        <Dial type={\"modes\"} />\n      </Wrapper>\n      <div>\n        <Wrapper>\n          <SectionWrapper>\n            <div>Mode Note</div>\n            <NoteSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedModeNote(e.target.value as Note);\n                }\n              }}\n            >\n              <option value={\"\"} label={\"Select root:\"}></option>\n\n              {initialNotes.map((noteDetails) => {\n                return (\n                  <option key={noteDetails.note} value={noteDetails.note}>\n                    {noteDetails.note}\n                  </option>\n                );\n              })}\n            </NoteSelectStyle>\n          </SectionWrapper>\n          <SectionWrapper>\n            <div>Scale Note</div>\n            <NoteSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedScaleNote(e.target.value as Note);\n                }\n              }}\n            >\n              <option value={\"\"} label={\"Select root:\"}></option>\n\n              {initialNotes.map((noteDetails) => {\n                return (\n                  <option key={noteDetails.note} value={noteDetails.note}>\n                    {noteDetails.note}\n                  </option>\n                );\n              })}\n            </NoteSelectStyle>\n          </SectionWrapper>\n        </Wrapper>\n        {/* <SectionWrapper>\n          <div>Select Mode:</div>\n          <Wrapper>\n            <ScaleSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedMode(e.target.value as ModeName);\n                }\n              }}\n            >\n              <option value=\"\" label={\"Select mode:\"} />\n              {Object.keys(modeMap).map((modeName) => {\n                return (\n                  <option key={modeName} value={modeName}>\n                    {modeName}\n                  </option>\n                );\n              })}\n            </ScaleSelectStyle>\n            <NoteSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedModeNote(e.target.value as Note);\n                }\n              }}\n            >\n              <option value={\"\"} label={\"Select root:\"}></option>\n\n              {initialNotes.map((noteDetails) => {\n                return (\n                  <option key={noteDetails.note} value={noteDetails.note}>\n                    {noteDetails.note}\n                  </option>\n                );\n              })}\n            </NoteSelectStyle>\n            <Button\n              disabled={!selectedMode || !selectedModeNote}\n              onClick={() => {\n                if (selectedMode && selectedModeNote) {\n                  const mode = {\n                    name: selectedMode,\n                    note: selectedModeNote,\n                  };\n                  dispatch({\n                    type: \"SELECT_MODE\",\n                    payload: mode,\n                  });\n                }\n              }}\n            >\n              Filter\n            </Button>\n          </Wrapper>\n        </SectionWrapper>\n        <SectionWrapper>\n          <div>Select Scale:</div>\n          <Wrapper>\n            <ScaleSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedScale(e.target.value as ScaleName);\n                }\n              }}\n            >\n              <option value=\"\" label={\"Select scale:\"} />\n              {Object.keys(scales).map((scaleName) => {\n                return (\n                  <option key={scaleName} value={scaleName}>\n                    {scaleName}\n                  </option>\n                );\n              })}\n            </ScaleSelectStyle>\n            <NoteSelectStyle\n              onChange={(e) => {\n                if (e.target.value) {\n                  setSelectedScaleNote(e.target.value as Note);\n                }\n              }}\n            >\n              <option value={\"\"} label={\"Select root:\"}></option>\n\n              {initialNotes.map((noteDetails) => {\n                return (\n                  <option key={noteDetails.note} value={noteDetails.note}>\n                    {noteDetails.note}\n                  </option>\n                );\n              })}\n            </NoteSelectStyle>\n            <Button\n              disabled={!selectedScale || !selectedScaleNote}\n              onClick={() => {\n                if (selectedScale && selectedScaleNote) {\n                  const scale = {\n                    name: selectedScale,\n                    note: selectedScaleNote,\n                  };\n                  dispatch({\n                    type: \"SELECT_SCALE\",\n                    payload: scale,\n                  });\n                }\n              }}\n            >\n              Filter\n            </Button>\n          </Wrapper>\n        </SectionWrapper> */}\n        <SectionWrapper>\n          {/* <div>Select Note:</div> */}\n          {/* <NotesWrapper>\n            {initialNotes.map((noteDetails: BoardDisplayNote) => {\n              return (\n                <NoteContainer key={noteDetails.note}>\n                  {selectedNotes.includes(noteDetails.note) ? (\n                    <>\n                      <HighlightedIndicator />\n                      <NoteWrapper>\n                        <HighlightedNoteStyle>\n                          <NoteStyle\n                            onClick={() => {\n                              dispatch({\n                                type: \"SELECT_NOTE\",\n                                payload: noteDetails.note,\n                              });\n                            }}\n                          >\n                            <NoteGradient>{noteDetails.note}</NoteGradient>\n                          </NoteStyle>\n                        </HighlightedNoteStyle>\n                      </NoteWrapper>\n                    </>\n                  ) : (\n                    <>\n                      <Indicator />\n                      <NoteWrapper>\n                        <NoteStyleBorder>\n                          <NoteStyle\n                            onClick={() => {\n                              dispatch({\n                                type: \"SELECT_NOTE\",\n                                payload: noteDetails.note,\n                              });\n                            }}\n                          >\n                            <NoteGradient>{noteDetails.note}</NoteGradient>\n                          </NoteStyle>\n                        </NoteStyleBorder>\n                      </NoteWrapper>\n                    </>\n                  )}\n                </NoteContainer>\n              );\n            })}\n          </NotesWrapper> */}\n        </SectionWrapper>\n      </div>\n    </Root>\n  );\n};\n\nexport default Selector;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Main from \"./components/Main/Main\";\nimport Selector from \"./components/Selector/Selector\";\nimport { useTypedDispatch } from \"./store\";\nimport { FretboardModel } from \"./store/fretboard\";\nimport { RootState } from \"./store/state\";\nimport { jimmyPageTuning, standardTuning } from \"./store/static\";\n\nconst Root = styled.div`\n  font: normal 14px Open Sans;\n  padding: 30px;\n  position: relative;\n`;\nconst Title = styled.div`\n  display: flex;\n  font: normal 2em Varela Round;\n  padding: 20px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst App: React.FC = () => {\n  const dispatch = useTypedDispatch();\n\n  const { tuning } = useSelector<RootState, FretboardModel>(\n    (state) => state.fretboard\n  );\n\n  return (\n    <Root>\n      {/* <Title>GuitarReff</Title> */}\n      {/* <button\n        onClick={() =>\n          dispatch({\n            type: \"UPDATE_TUNING\",\n            payload: standardTuning,\n          })\n        }\n      >\n        Standard Tuning\n      </button>\n      <button\n        onClick={() =>\n          dispatch({\n            type: \"UPDATE_TUNING\",\n            payload: jimmyPageTuning,\n          })\n        }\n      >\n        Jimmy Page Tuning\n      </button>\n      <Wrapper>\n        {tuning.map((noteDetails, idx) => (\n          <div key={idx}>{noteDetails.note}</div>\n        ))}\n      </Wrapper> */}\n      <div>\n        <Selector />\n        <Main />\n      </div>\n    </Root>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore } from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}