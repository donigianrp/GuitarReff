{"version":3,"sources":["components/Fretboard/Fret/FretBar/FretBar.tsx","components/Fretboard/Fret/BoardSegment/BoardSegment.tsx","components/Fretboard/Fret/Strings/Strings.tsx","components/Fretboard/Fret/Fret.tsx","components/Fretboard/Fretboard.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Root","styled","div","Fret","props","MarkerWrapper","Marker","BoardSegment","boardMarkers","boardMarkersContainer","i","push","renderBoardMarkers","String","Strings","Wrapper","FretLabel","FretComponentsWrapper","fretPosition","markerAmount","FretBar","Fretboard","fretContainer","includes","renderFrets","Main","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAGA,IAAMA,EAAOC,IAAOC,IAAV,KAUKC,EAJiB,SAAAC,GAC9B,OAAO,kBAACJ,EAAD,O,0lBCPT,IAAMA,EAAOC,IAAOC,IAAV,KAYJG,EAAgBJ,IAAOC,IAAV,KAMbI,EAASL,IAAOC,IAAV,KA4BGK,EAjBgC,SAACH,GAAkB,IACxDI,EAAiBJ,EAAjBI,aASR,OACE,kBAAC,EAAD,KACE,kBAACH,EAAD,KAVuB,WAEzB,IADA,IAAII,EAA8C,GACzCC,EAAI,EAAGA,EAAIF,EAAcE,IAChCD,EAAsBE,KAAK,kBAACL,EAAD,OAE7B,OAAOG,EAKWG,M,6UCzCtB,IAAMZ,EAAOC,IAAOC,IAAV,KAUJW,EAASZ,IAAOC,IAAV,KAoBGY,EAb2B,SAACV,GACzC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,+WCtBN,IAAMW,EAAUd,IAAOC,IAAV,KAIPc,EAAYf,IAAOC,IAAV,KAQTe,EAAwBhB,IAAOC,IAAV,KAuBZC,EAdwB,SAACC,GAAkB,IAChDc,EAA+Bd,EAA/Bc,aAAcC,EAAiBf,EAAjBe,aACtB,OACE,kBAACJ,EAAD,KACE,kBAACC,EAAD,KAAYE,GACZ,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcT,aAAcW,IAC5B,kBAACC,EAAD,S,0GC/BR,IAAMpB,EAAOC,IAAOC,IAAV,KAsBKmB,EAjBsB,SAAAjB,GAcnC,OAAO,kBAAC,EAAD,KAba,WAElB,IADA,IAAIkB,EAAsC,GACjCZ,EAAI,EAAGA,GAAK,GAAIA,IACnB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAIa,SAASb,GACxCY,EAAcX,KAAK,kBAAC,EAAD,CAAMO,aAAcR,EAAGS,aAAc,KACzC,KAANT,EACTY,EAAcX,KAAK,kBAAC,EAAD,CAAMO,aAAcR,EAAGS,aAAc,KAExDG,EAAcX,KAAK,kBAAC,EAAD,CAAMO,aAAcR,EAAGS,aAAc,KAG5D,OAAOG,EAEKE,K,qICnBhB,IAAMxB,EAAOC,IAAOC,IAAV,KAcKuB,EARiB,SAAArB,GAC9B,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,Q,sOCTN,IAAMJ,EAAOC,IAAOC,IAAV,KAIJwB,EAAQzB,IAAOC,IAAV,KAaIyB,EATO,WACpB,OACE,kBAAC,EAAD,KACE,kBAACD,EAAD,gCACA,kBAAC,EAAD,QCJcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8fb15ccb.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: #daa520;\n`;\n\nconst Fret: FunctionComponent = props => {\n  return <Root></Root>;\n};\n\nexport default Fret;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  background: linear-gradient(\n    90deg,\n    rgba(102, 102, 102, 1) 0%,\n    rgba(51, 51, 51, 1) 13%,\n    rgba(51, 51, 51, 1) 87%,\n    rgba(102, 102, 102, 1) 100%\n  );\n  width: 300px;\n  height: 40px;\n`;\n\nconst MarkerWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  height: 100%;\n`;\nconst Marker = styled.div`\n  width: 10px;\n  height: 10px;\n  background-color: #daa520;\n  border-radius: 30px;\n`;\n\ninterface Props {\n  boardMarkers: number;\n}\n\nconst BoardSegment: FunctionComponent<Props> = (props: Props) => {\n  const { boardMarkers } = props;\n  const renderBoardMarkers = () => {\n    let boardMarkersContainer: React.ReactElement[] = [];\n    for (let i = 0; i < boardMarkers; i++) {\n      boardMarkersContainer.push(<Marker></Marker>);\n    }\n    return boardMarkersContainer;\n  };\n\n  return (\n    <Root>\n      <MarkerWrapper>{renderBoardMarkers()}</MarkerWrapper>\n    </Root>\n  );\n};\n\nexport default BoardSegment;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: space-around;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 40px;\n`;\n\nconst String = styled.div`\n  height: 40px;\n  width: 1px;\n  background-color: #ccc;\n`;\ninterface Props {}\n\nconst Strings: FunctionComponent<Props> = (props: Props) => {\n  return (\n    <Root>\n      <String />\n      <String />\n      <String />\n      <String />\n      <String />\n      <String />\n    </Root>\n  );\n};\n\nexport default Strings;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport FretBar from \"./FretBar/FretBar\";\nimport BoardSegment from \"./BoardSegment/BoardSegment\";\nimport Strings from \"./Strings/Strings\";\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst FretLabel = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 30px;\n  margin-right: 30px;\n`;\n\nconst FretComponentsWrapper = styled.div`\n  position: relative;\n`;\n\ninterface Props {\n  fretPosition: number;\n  markerAmount: number;\n}\n\nconst Fret: FunctionComponent<Props> = (props: Props) => {\n  const { fretPosition, markerAmount } = props;\n  return (\n    <Wrapper>\n      <FretLabel>{fretPosition}</FretLabel>\n      <FretComponentsWrapper>\n        <Strings />\n        <BoardSegment boardMarkers={markerAmount} />\n        <FretBar />\n      </FretComponentsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default Fret;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport Fret from \"./Fret/Fret\";\n\nconst Root = styled.div`\n  height: 600px;\n  width: 360px;\n`;\n\nconst Fretboard: FunctionComponent = props => {\n  const renderFrets = () => {\n    let fretContainer: React.ReactElement[] = [];\n    for (let i = 1; i <= 22; i++) {\n      if ([3, 5, 7, 9, 15, 17, 19, 21].includes(i)) {\n        fretContainer.push(<Fret fretPosition={i} markerAmount={1} />);\n      } else if (i === 12) {\n        fretContainer.push(<Fret fretPosition={i} markerAmount={2} />);\n      } else {\n        fretContainer.push(<Fret fretPosition={i} markerAmount={0} />);\n      }\n    }\n    return fretContainer;\n  };\n  return <Root>{renderFrets()}</Root>;\n};\n\nexport default Fretboard;\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"styled-components\";\nimport Fretboard from \"../Fretboard/Fretboard\";\n\nconst Root = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Main: FunctionComponent = props => {\n  return (\n    <Root>\n      <Fretboard />\n    </Root>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Main from \"./components/Main/Main\";\n\nconst Root = styled.div`\n  background-color: #fff;\n  font: normal 14px Candara, sans-serif;\n`;\nconst Title = styled.div`\n  font-size: 2em;\n`;\n\nconst App: React.FC = () => {\n  return (\n    <Root>\n      <Title>Welcome to Guitar Reff!</Title>\n      <Main />\n    </Root>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}